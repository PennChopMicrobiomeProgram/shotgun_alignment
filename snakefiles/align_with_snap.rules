import itertools
import glob
import pathlib
import random

from snakemake.utils import update_config

def get_sample_ids_from_filenames(input_dir, suffix):
    dir_path = pathlib.Path(input_dir)
    input_file_paths = [x for x in dir_path.iterdir() if x.is_file()]
    suffix_paths = [x for x in input_file_paths if x.name.endswith(suffix)]
    return [x.name.replace(suffix, "") for x in suffix_paths]


default_config = {
    "taxonomy_dir": "/home/kyle/Software/shotgun_alignment/",
    "assembly_dir": "/home/kyle/BioData/shotgun_reference_genomes/bacteria",
    "index_dir": "/home/kyle/index_data",
    "input_dir": "/home/kyle/input_data",
    "work_dir": "/home/kyle/work_data",
    "output_dir": "/home/kyle/output_data",
    "testrun": False,
    "split_db": 10,
}
update_config(default_config, config)
config = default_config


# Compute static values to use in rules
PARTITION_IDS = [str(x) for x in range(config["split_db"])]
SAMPLE_IDS = get_sample_ids_from_filenames(config["input_dir"], "_R1.fastq.gz")



TARGET_FPS = expand(
    "{out}/{sample_id}.taxa.counts.reduced.standardized",
    out=config["output_dir"], sample_id=SAMPLE_IDS)

rule all:
    input: TARGET_FPS

rule standardize_taxa:
    input:
        config["work_dir"] + "/{sample_id}.taxa.counts.reduced"
    output:
        config["output_dir"] + "/{sample_id}.taxa.counts.reduced.standardized"
    shell:
        "standardize_taxa {config[taxonomy_dir]} < {input} > {output}"
    
rule reduce_multitaxa:
    input:
        config["work_dir"] + "/{sample_id}.taxa.counts"
    output:
        config["work_dir"] + "/{sample_id}.taxa.counts.reduced"
    shell:
        "apply_lca {config[taxonomy_dir]} < {input} > {output}"

rule count_taxa:
    input:
        config["work_dir"] + "/merged_sam_data/{sample_id}.taxa"
    output:
        config["work_dir"] + "/{sample_id}.taxa.counts"
    shell:
        "cut -f 2- {input} | sort | uniq -c > {output}"

rule get_taxa:
    input:
        config["work_dir"] + "/merged_sam_data/{sample_id}.sammin"
    output:
        config["work_dir"] + "/merged_sam_data/{sample_id}.taxa"
    shell:
        "resolve_taxa "
        "{config[index_dir]}/partition_refids.txt "
        "{config[assembly_dir]}/../bacteria_assembly_summary.txt "
        "< {input} > {output}"

rule sort_alignments:
    input:
        config["work_dir"] + "/merged_sam_data/{sample_id}.sammin.unsorted"
    output:
        config["work_dir"] + "/merged_sam_data/{sample_id}.sammin"
    shell:
        "sort < {input} > {output}"

rule merge_alignments:
    input:
        lambda wildcards: expand(
            config["work_dir"] + "/sam_data/{sample_id}/bacteria_{partition_id}.sammin",
            sample_id=wildcards.sample_id,
            partition_id=PARTITION_IDS,
        )
    output:
        config["work_dir"] + "/merged_sam_data/{sample_id}.sammin.unsorted"
    shell:
        "mkdir -p merged_sam_data; "
        "rm -f {output}; "
        "for FP in {input}; do "
        "    cat $FP >> {output}; "
        "done"

rule snap_align_paired:
    input:
        read1=config["input_dir"] + "/{sample_id}_R1.fastq",
        read2=config["input_dir"] + "/{sample_id}_R2.fastq",
        genome=config["index_dir"] + "/bacteria_{partition_id}/Genome",
        genomeindex=config["index_dir"] + "/bacteria_{partition_id}/GenomeIndex",
        indexhash=config["index_dir"] + "/bacteria_{partition_id}/GenomeIndexHash",
        overflow=config["index_dir"] + "/bacteria_{partition_id}/OverflowTable"
    output:
        config["work_dir"] + "/sam_data/{sample_id}/bacteria_{partition_id}.sammin"
    params:
        indexdir=config["index_dir"] + "/bacteria_{partition_id}"
    threads: 8
    shell:
        "snap-aligner paired {params.indexdir} {input.read1} {input.read2} "
        "-t {threads} -D 5 -om 5 -omax 100 "
        "-o -sam - | "
        "python convert_sam.py > {output}"

rule unzip_fastq:
    input:
        config["input_dir"] + "/{sample_id}_{read_idx}.fastq.gz",
    output:
        config["input_dir"] + "/{sample_id}_{read_idx}.fastq"
    shell:
        "gunzip -c {input} > {output}"

rule clean:
    shell: "rm -rf {config[work_dir]}/*"
